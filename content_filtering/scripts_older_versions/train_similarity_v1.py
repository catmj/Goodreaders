import pandas as pd # type: ignore
import numpy as np # type: ignore
from sklearn.metrics.pairwise import cosine_similarity # type: ignore

# --- Define file paths ---
output_vectors_csv_file = '../keyword_processing/books_with_vectors.csv'
base_output_filename='book_similarity_matrix'

def calculate_book_similarity(books_with_vectors_filepath, genre_weight = 0.5, keyword_weight = 0.5):
    """
    Reads book data with vectors, calculates combined keyword and genre cosine similarity
    matrix, and returns the matrix along with combined book identifiers.

    Args:
        books_with_vectors_filepath (str): Path to the CSV file containing book titles, authors,
                                           and keyword/genre vectors as string representations of lists.

    Returns:
        tuple: A tuple containing:
               - combined_sim_matrix (np.array): The square similarity matrix.
               - combined_headers (list): List of strings "Title by Author Name" for each book.
               - df (pd.DataFrame): The loaded DataFrame for potential further use.
               Returns (None, None, None) if an error occurs or data is insufficient.
    """
    print(f"\n--- Calculating Book Similarity ---")
    print(f"Reading data from: {books_with_vectors_filepath}")

    try:
        df = pd.read_csv(books_with_vectors_filepath)
    except FileNotFoundError:
        print(f"Error: {books_with_vectors_filepath} not found.")
        return None, None, None
    except Exception as e:
        print(f"Error reading {books_with_vectors_filepath}: {e}")
        return None, None, None

    if df.empty:
        print("Input CSV is empty. No similarity matrix to calculate.")
        return None, None, None

    required_cols = ['title', 'author_name', 'keyword_vector', 'genre_vector']
    if not all(col in df.columns for col in required_cols):
        print(f"Error: Missing one or more required columns ({required_cols}) in the CSV.")
        print("Please ensure the input CSV was generated by `export_vectors_to_csv` function.")
        return None, None, None

    print("Converting vector strings to lists...")
    try:
        keyword_vectors = np.array([eval(x) for x in df['keyword_vector']])
        genre_vectors = np.array([eval(x) for x in df['genre_vector']])
    except Exception as e:
        print(f"Error converting vector strings to lists. Ensure they are valid list representations: {e}")
        return None, None, None

    if keyword_vectors.shape[0] == 0 or genre_vectors.shape[0] == 0:
        print("No valid vectors found after conversion. Cannot calculate similarity.")
        return None, None, None

    print("Calculating keyword similarity...")
    keyword_sim_matrix = cosine_similarity(keyword_vectors)

    print("Calculating genre similarity...")
    genre_sim_matrix = cosine_similarity(genre_vectors)

    print("Combining similarities...")
    combined_sim_matrix = (genre_weight * genre_sim_matrix) + (keyword_weight * keyword_sim_matrix)

    combined_headers = [
        f"{title}, {author_name}"
        for title, author_name in zip(df['title'], df['author_name'])
    ]

    return combined_sim_matrix, combined_headers


def export_similarity_data(combined_sim_matrix, combined_headers, base_output_filename='book_similarity_matrix', g=0.8):
    """
    Exports a similarity matrix to a CSV file, a NumPy .npy file, and a text file
    containing the corresponding book identifiers.
    """
    if combined_sim_matrix is None or combined_headers is None:
        print("No similarity matrix or headers provided for export.")
        return

    # --- Export to NumPy .npy file ---
    npy_filepath = f"{base_output_filename}_{str(g).replace('.', '-')}.npy"
    print(f"Exporting similarity matrix to NumPy .npy: '{npy_filepath}'...")
    try:
        np.save(npy_filepath, combined_sim_matrix)
        print(f"Successfully exported NumPy array to '{npy_filepath}'")
    except Exception as e:
        print(f"Error exporting to NumPy .npy: {e}")

    # --- Export list of book identifiers to .txt file ---
    txt_filepath = f"{base_output_filename}_books_{str(g).replace('.', '-')}.txt"
    print(f"Exporting book identifiers to text file: '{txt_filepath}'...")
    try:
        with open(txt_filepath, 'w', encoding='utf-8') as f:
            for header in combined_headers:
                f.write(f"{header}\n")
        print(f"Successfully exported book identifiers to '{txt_filepath}'")
    except Exception as e:
        print(f"Error exporting book identifiers to text file: {e}")




for g,k in [(0.5,0.5), (0.8,0.2), {0, 1}]:
    print(f"genre weight = {g}, keyword wight = {k}")
    combined_sim_matrix, combined_headers = calculate_book_similarity(output_vectors_csv_file, genre_weight = g, keyword_weight = k)
    export_similarity_data(combined_sim_matrix, combined_headers, g=g)

